#!/usr/bin/env python
# coding: utf8
from __future__ import print_function

import datetime, dateutil.parser, getpass, os, paramiko, random, sqlite3
import shutil, sys, time
from dateutil.relativedelta import *
from uuid import uuid4
from StringIO import StringIO

PRIORITIES = [
	'Low',
	'Wish',
	'Normal',
	'High',
	'Critical',
]

PRIORITY_CLR = {
	'Critical': '~B~r',
	'High':     '~B~g',
	'Normal':   '~y',
	'Low':      '',
	'Wish':     '~z'
}

def pick(a, b):
	return b if a is None else a

def parse_date(datestr):
	today = datetime.datetime.now()
	weekdays = {'monday': MO, 'tuesday': TU, 'wednesday': WE,
				'thursday': TH, 'friday': FR}

	if datestr == 'today':
		return today
	elif datestr == 'tomorrow':
		return today + relativedelta(days = +1)
	elif datestr in weekdays:
		return today + relativedelta(weekday = weekdays[datestr])
	elif datestr.startswith('next-') and datestr[5:] in weekdays:
		return today + relativedelta(weekday = weekdays[datestr[5:]](2))
	else:
		return dateutil.parser.parse(datestr, dayfirst = True)

class Task(object):
	def __init__(self, task_list, record_id = None, uuid = None, title = None,
			parent_uuid = None, progress = None, priority = None, due = None,
			notes = None):
		self.task_list = task_list
		self.record_id = record_id
		self.uuid = uuid or str(uuid4())
		self._depth = None

		self.title = title
		self.parent_uuid = parent_uuid
		self.progress = progress
		self.priority = priority
		self.due = dateutil.parser.parse(due) if isinstance(due, unicode) else due
		self.entered = datetime.datetime.now()
		self.notes = notes
	
	@property
	def parent(self):
		return self.task_list.find_uuid(self.parent_uuid)

	@property
	def children(self):
		return self.task_list.children(self.uuid)

	@property
	def tags(self):
		return self.task_list.tags(self.uuid)

	@property
	def depth(self):
		if self._depth == None:
			depth = 0
			current = self

			while current.parent_uuid is not None:
				current = current.parent
				depth += 1

			self._depth = depth
			return depth
		else:
			return self._depth

	def save(self):
		if self.record_id is None:
			self.task_list.add(self)
		else:
			self.task_list.update(self)
			
	def remove(self):
		self.task_list.remove(self.record_id, self.uuid)
	
	def tag(self, tag):
		self.task_list.tag(self.uuid, tag)

	def untag(self, tag):
		self.task_list.tag(self.uuid, tag)

	
	def format_str(self, field):
		if hasattr(self, field) and getattr(self, field) is None:
			return '-'
		elif field == 'progress':
			return '%d%%' % self.progress
		elif field == 'priority':
			return PRIORITIES[self.priority]
		elif field == 'due':
			return self.due.strftime('%d/%m/%y')
		elif field == 'entered':
			return self.entered.strftime('%d/%m/%y')
		elif field == 'id':
			if self.depth > 0:
				spaces = ('  ' * max(0, self.depth - 1))
				return spaces + u'â†³ ' + str(self.record_id)
			else:
				return str(self.record_id)
		elif field == 'title':
			return (' ' * self.depth) + self.title
		elif field == 'n?':
			return 'N' if self.notes is None else 'Y'
		elif field == 'notes':
			return unicode(self.notes)
		elif field == 'tags':
			return ', '.join(self.tags)
		else:
			return str(getattr(self, field))
	
	def format(self, field):
		if self.progress == 100:
			return '~z%s~0' % self.format_str(field)
		elif field == 'n?':
			return 'N' if self.notes is None else '~B~gY~0'
		elif field == 'priority':
			priority = PRIORITIES[pick(self.priority, 3)]
			return PRIORITY_CLR[priority] + self.format_str(field) + '~0'
		elif field == 'progress':
			progress = pick(self.progress, 79)
			if progress < 20:
				colour = '~r'
			elif progress < 50:
				colour = '~y'
			elif progress < 80:
				colour = ''
			else:
				colour = '~g'

			return colour + self.format_str(field) + '~0'
		else:
			return self.format_str(field)
	
	def to_list(self):
		return [self.uuid, self.title, self.parent_uuid, self.progress,
				self.priority, self.due, self.notes]

class TaskList(object):
	def __init__(self, filename, initialise = False):
		if not os.path.exists(filename):
			initialise = True

		self.conn = sqlite3.connect(filename)

		if initialise:
			# We need to create the tables
			cursor = self.conn.cursor()
			cursor.execute('''CREATE TABLE tasks (
	id INTEGER PRIMARY KEY,
	uuid VARCHAR,
	title VARCHAR NOT NULL,
	parent_uuid INTEGER,
	progress INTEGER,
	priority INTEGER,
	due DATE,
	notes VARCHAR
)''')
			cursor.execute('''CREATE TABLE remotes (
	name VARCHAR,
	host VARCHAR,
	port INTEGER,
	user VARCHAR,
	key VARCHAR,
	last_sync DATETIME
)''')
			cursor.execute('''CREATE TABLE tags (
	tag VARCHAR,
	task_uuid VARCHAR
)''')
			cursor.execute('CREATE TABLE deleted (uuid VARCHAR)')
			cursor.close()
	
	name_override = None

	@classmethod
	def active_path(cls):
		'Return the path to the active database.'
		if cls.name_override is not None:
			name = cls.name_override
		else:
			name = os.environ.get('TASKLIST', '../.taskdb')

		return os.path.expanduser('~/.taskdb.d/%s' % name)

	
	def find(self, record_id):
		cursor = self.conn.cursor()
		cursor.execute('SELECT uuid, title, parent_uuid, progress, priority, due,\
notes FROM tasks WHERE id = ?', [record_id])
		row = cursor.fetchone()
		cursor.close()

		if row is None:
			return None
		else:
			task = Task(self, record_id, *row)
			return task

	def find_uuid(self, uuid):
		cursor = self.conn.cursor()
		cursor.execute('SELECT id, uuid, title, parent_uuid, progress, priority, due,\
notes FROM tasks WHERE uuid = ?', [uuid])
		row = cursor.fetchone()
		cursor.close()

		if row is None:
			return None
		else:
			task = Task(self, *row)
			return task
	
	def add(self, task):
		cursor = self.conn.cursor()
		cursor.execute('INSERT INTO tasks (uuid, title, parent_uuid, progress,\
priority, due, notes) VALUES (?, ?, ?, ?, ?, ?, ?)', task.to_list())
		task.record_id = cursor.lastrowid
		cursor.close()
		self.conn.commit()
	
	def update(self, task):
		cursor = self.conn.cursor()
		values = task.to_list() + [task.record_id]
		cursor.execute('UPDATE tasks SET uuid = ?, title = ?, parent_uuid = ?,\
progress = ?, priority = ?, due = ?, notes = ? WHERE id = ?', values)
		cursor.close()
		self.conn.commit()

	def update_uuid(self, task):
		cursor = self.conn.cursor()
		values = task.to_list()[1:] + [task.uuid]
		cursor.execute('UPDATE tasks SET title = ?, parent_uuid = ?,\
progress = ?, priority = ?, due = ?, notes = ? WHERE uuid = ?', values)
		cursor.close()
		self.conn.commit()

	def children(self, uuid):
		cursor = self.conn.cursor()
		cursor.execute('SELECT id, uuid, title, parent_uuid, progress,\
priority, due, notes FROM tasks WHERE parent_uuid = ?', [uuid])
		tasks = [Task(self, *row) for row in cursor.fetchall()]
		cursor.close()

		return tasks
	
	def list(self, query = '', params = []):
		cursor = self.conn.cursor()
		cursor.execute('SELECT id, uuid, title, parent_uuid, progress, priority,\
due, notes FROM tasks ' + query, params)
		tasks = [Task(self, *row) for row in cursor.fetchall()]
		cursor.close()

		return tasks
	
	def remove(self, task_id, uuid):
		cursor = self.conn.cursor()
		cursor.execute('DELETE FROM tasks WHERE id = ?', [task_id])
		cursor.execute('INSERT INTO deleted (uuid) VALUES (?)', [uuid])
		cursor.close()
		self.conn.commit()
	
	def remotes(self):
		cursor = self.conn.cursor()
		cursor.execute('SELECT name FROM remotes')
		names = [row[0] for row in cursor.fetchall()]
		cursor.close()

		return names

	def remote(self, name):
		'Return (host, port, user, key, last_sync) for a given remote.'
		cursor = self.conn.cursor()
		cursor.execute('SELECT host, port, user, key, last_sync FROM remotes \
WHERE name = ?', [name])
		row = cursor.fetchone()
		cursor.close()
		
		return row

	def add_remote(self, name, host, port = 22, user = None, key = None):
		cursor = self.conn.cursor()
		cursor.execute('INSERT INTO remotes (name, host, port, user, key) \
VALUES (?, ?, ?, ?, ?)', [name, host, port, user, key])
		cursor.close()
		self.conn.commit()
	
	def remote_synced(self, name, when):
		cursor = self.conn.cursor()
		cursor.execute('UPDATE remotes SET last_sync = ? WHERE name = ?',
					   [when, name])
		cursor.close()
		self.conn.commit()
	
	def deleted(self):
		cursor = self.conn.cursor()
		cursor.execute('SELECT * FROM deleted')
		uuids = [row[0] for row in cursor.fetchall()]
		cursor.close()

		return uuids
	
	def tags(self, uuid):
		cursor = self.conn.cursor()
		cursor.execute('SELECT tag, task_uuid FROM tags')
		tags = [row[0] for row in cursor.fetchall()]
		cursor.close()

		return tags

	def tag(self, uuid, name):
		if name in self.tags(uuid):
			return False

		cursor = self.conn.cursor()
		cursor.execute('INSERT INTO tags (tag, task_uuid) VALUES (?, ?)',
					   [name, uuid])
		cursor.close()
		self.conn.commit()
		return True

	def untag(self, uuid, name):
		cursor = self.conn.cursor()
		cursor.execute('DELETE FROM tags WHERE tag = ? AND task_uuid = ?',
					   [name, uuid])
		cursor.close()
		self.conn.commit()
	
	def tagged(self, tag):
		cursor = self.conn.cursor()
		cursor.execute('SELECT tasks.id, tasks.uuid, tasks.title, \
tasks.parent_uuid, tasks.progress, tasks.priority, tasks.due, tasks.notes \
INNER JOIN tags ON tasks.uuid = tags.task_uuid WHERE tags.tag = ?', [tag])
		tasks = [Task(self, *row) for row in cursor.fetchall()]
		cursor.close()

		return tasks

class TableView(object):
	def __init__(self, columns, field_getter = None,
				 empty_msg = 'No items to display.'):
		self.columns = tuple(columns)
		self.lengths = dict(zip(columns, [len(c) + 1 for c in columns]))
		self.empty_msg = empty_msg
		self.rows = []

		if field_getter is None:
			self.field_getter = lambda x, f: x[f]
		else:
			self.field_getter = field_getter
	
	def add_rows(self, rows):
		for row in rows:
			for col in self.columns:
				value = self.field_getter(row, col)
				
				if self.len(value) >= self.lengths[col]:
					self.lengths[col] = self.len(value) + 1

			self.rows.append(row)
	
	def order(self, column, desc = False):
		self.rows.sort(key = lambda x: self.field_getter(x, column),
					   reverse = desc)
	
	def tree(self, parent_id):
		children = {}
		rows = []

		for row in self.rows:
			pid = parent_id(row)
			children[pid] = children.get(pid, []) + [row]

		def process_row(current):
			rows.append(current)
				
			for child in children.get(current.uuid, []):
				process_row(child)

		for row in children.get(None, []):
			process_row(row)

		self.rows = rows


	
	def header(self, output = sys.stdout.write):
		output('~B')

		for col in self.columns:
			output(self.pad(col.title(), self.lengths[col]))

		output('~0\n')
	

	def pad(self, s, n):
		if n > self.len(s):
			s += ' ' * (n - self.len(s))

		return s

	def len(self, s):
		for l in '0Brgbyz':
			s = s.replace('~' + l, '')
		return len(s)
	

	def format(self, limit = None, output = sys.stdout.write):
		self.header(output)

		if limit is None:
			start, end = 0, len(self.rows)
		else:
			start, end = limit
			start = max(start, 0)
			end = min(end, len(self.rows))

		rows = self.rows[start:end]

		if len(rows) != 0:
			for row in rows:
				for col in self.columns:
					value = self.field_getter(row, col)
					padded = self.pad(value, self.lengths[col])
					output(padded)
				
				output('\n')
		else:
			output(self.empty_msg)
			output('\n')


class TasksApp(object):
	def __init__(self, task_list):
		self.task_list = task_list
		self.fields = ['id', 'title', 'progress', 'priority', 'due',
					   'entered']
	
	def run(self, argv = None):
		argv = sys.argv if argv is None else argv
		command = argv[1] if len(argv) > 1 else 'list'
		funct = 'cmd_' + command.replace('-', '_')

		def parse(arg):
			try:
				return int(arg)
			except ValueError:
				try:
					return float(arg)
				except ValueError:
					return arg

		if hasattr(self, funct):
			pos = []
			kw = {}

			for arg in argv[2:]:
				if '=' in arg:
					parts = arg.split('=')
					key = parts[0]
					value = '='.join(parts[1:])
					kw[key] = parse(value)
				else:
					pos.append(parse(arg))

			getattr(self, funct)(*pos, **kw)
		else:
			self.write('~rerror~0: unrecognised command "%s".\n' % command)
			sys.exit(1)


	def write(self, out):
		for k, v in ({'~B': '\x1B[1m', '~0': '\x1B[0m', '~r': '\x1B[31m',
					  '~g': '\x1B[32m', '~y': '\x1B[33m',
					  '~b': '\x1B[34m', '~z': '\x1B[30m'}).items():
			out = out.replace(k, v)

		sys.stdout.write(out.encode('utf8'))
	
	def table(self, sort, desc, number = -1, cond = '1'):
		direction = 'DESC' if desc else 'ASC'
		limit = '' if number == -1 else 'LIMIT %d' % number
		query = 'WHERE %s ORDER BY %s %s %s' % (cond, sort.lower(),
												direction, limit)
		tasks = self.task_list.list(query)
		view = TableView(self.fields + ['n?'],
						 lambda x, f: x.format(f))

		view.add_rows(tasks)
		if sort == 'id':
			view.tree(lambda x: x.parent_uuid)
		view.format(output = self.write)

	
	def cmd_list(self, sort = 'id', direction = 'asc', number = -1):
		self.table(sort, direction == 'desc', number)
	
	def cmd_late(self, sort = 'id', direction = 'desc', number = -1):
		self.table(sort, direction, number, "DATE(due) < DATE('now')")

	def cmd_tagged(self, tag, sort = 'id', direction = 'desc', number = -1):
		self.table(sort, direction, number, "DATE(due) < DATE('now')")

	def cmd_today(self, sort = 'id', direction = 'desc', number = -1):
		self.table(sort, direction, number, "DATE(due) = DATE('now')")
	
	def get_task(self, id = None, uuid = None, title = None,
				 parent = None, progress = None, priority = None,
				 due = None, notes = None):
		if priority is not None:
			priority = PRIORITIES.index(priority)

		if due is not None:
			due = parse_date(due)

		if parent is not None:
			# convert from numeric ID -> UUID
			parent = self.task_list.find(parent).uuid

		if id is None:
			t = Task(self.task_list, None, None, title, parent, progress,
					 priority, due, notes)
		else:
			t = self.task_list.find(id)
			d = {'parent': 'parent_uuid'}
			
			for f in ['uuid', 'title', 'parent', 'progress', 'priority',
					  'due', 'notes']:
				local = locals()[f]

				if local is not None:
					setattr(t, d.get(f, f), local)

		return t

	def cmd_add(self, title, *a, **kw):
		self.get_task(None, None, title, *a, **kw).save()
	
	def cmd_set(self, id, *a, **kw):
		self.get_task(id, None, *a, **kw).save()
	
	def cmd_priorities(self):
		[self.write('%s\n' % x) for x in PRIORITIES]
	
	def cmd_remotes(self):
		[self.write('%s\n' % x) for x in self.task_list.remotes()]
	
	def cmd_add_remote(self, name, host, port = 22, user = None,
					   keyfile = None):
		if keyfile is None:
			key = None
		else:
			handle = open(keyfile)
			key = handle.read()
			handle.close()

		self.task_list.add_remote(name, host, port, user, key)
	
	def cmd_del(self, id):
		self.task_list.find(id).remove()
	
	def cmd_pull(self, remote, name = 'default'):
		host, port, user, key, last_sync = self.task_list.remote(remote)
		MergeTool.pull(host, port, user, key, name)
		self.task_list.remote_synced(remote, datetime.datetime.now())

	def cmd_push(self, remote, name = 'default'):
		host, port, user, key, last_sync = self.task_list.remote(remote)
		MergeTool.push(host, port, user, key, name)
		self.task_list.remote_synced(remote, datetime.datetime.now())
	
	def cmd_show_remote(self, remote):
		host, port, user, key, last_sync = self.task_list.remote(remote)

		if last_sync is None:
			last_sync = 'never'
		else:
			fmt = '%m/%d/%y %H:%M:%S'
			last_sync = dateutil.parser.parse(last_sync).strftime(fmt)

		user = getpass.getuser() if user is None else user

		self.write('~BURI:~0         %s@%s:%d\n' % (user, host, port))
		self.write('~BKey Stored?:~0 %s\n' % ('no' if key is None else 'yes'))
		self.write('~BLast Synced:~0 %s\n' % last_sync)
	
	def cmd_view(self, id):
		fields = self.fields + ['tags', 'notes']
		max_length = max(map(len, fields))
		task = self.task_list.find(id)

		for field in fields:
			spaces = ' ' * (max_length - len(field) + 1)
			value = task.format(field)

			if '\n' in value:
				value = value.replace('\n', '\n' + (' ' * (max_length + 2)))

			self.write('~B%s:%s~0%s\n' % (field.title(), spaces, value))

		# this will print subtasks as well
		self.write('\n')
		if len(task.children) > 0:
			self.table('id', True, cond="id = %d OR \
parent_uuid = '%s'" % (id, task.uuid))
	
	def cmd_notes(self, id):
		task = self.task_list.find(id)
		notes_file = '/tmp/notes.%d' % random.randrange(1, 2 ** 16)
		editor = os.environ.get('EDITOR', 'vi')

		handle = open(notes_file, 'w')
		handle.write(task.format('notes').encode('utf8'))
		handle.close()

		os.system('%s "%s"' % (editor, notes_file))

		handle = open(notes_file, 'r')
		task.notes = handle.read().decode('utf8')
		handle.close()

		task.save()
		os.unlink(notes_file)
	
	def cmd_uuid(self, id):
		self.write('%s\n' % self.task_list.find(id).uuid)
	
	def cmd_uuidgen(self):
		for t in self.task_list.list():
			t.save()
	
	def cmd_deleted(self):
		[self.write('%s\n' % x) for x in self.task_list.deleted()]
	
	def cmd_regen(self):
		MergeTool.regen()
	
	def cmd_motd(self):
		tasks = len(self.task_list.list())
		late = len(self.task_list.list("WHERE due < date('now')"))
		today = len(self.task_list.list("WHERE date(due) = date('now')"))
		self.write('You have ~B%d~0 tasks, ~B%d~0 for today and \
~B~r%d~0 late.\n' % (tasks, today, late))
	
	def cmd_calendar(self, upto = None):
		if upto is not None:
			upto = parse_date(upto)

		dates = {}
		tasks = self.task_list.list()

		for task in tasks:
			if task.due is not None and (upto is None or task.due <= upto):
				date_str = task.due.strftime('%F')
				dates[date_str] = dates.get(date_str, []) + [task]

		dates = dates.items()
		dates.sort(key = lambda d: d[0])

		for date, tasks in dates:
			tasks.sort(key = lambda t: pick(t.priority, 9999))
			user_date = dateutil.parser.parse(date).strftime('%A, %B %d')
			self.write('~B%s~0\n' % user_date)

			for task in tasks:
				if task.priority is not None:
					self.write(PRIORITY_CLR[PRIORITIES[task.priority]])
				self.write('    %3d: %s~0\n' % (task.record_id, task.title))

			self.write('\n')
	
	def cmd_tag(self, id, *tags):
		task = self.task_list.find(id)

		for tag in tags:
			task.tag(tag.decode('utf8'))
	
	def cmd_untag(self, id, tag):
		task = self.task_list.find(id)

		if tag == '*':
			for tag in task.tags:
				task.untag(tag.decode('utf8'))
		else:
			task.untag(tag)
	
	def cmd_switch(self, name):
		default = os.path.expanduser('~/.taskdb')
		target = os.path.expanduser('~/.taskdb.d/%s' % name)

		os.unlink(default)
		os.symlink(target, default)
		TaskList(target)				# force creation of new DB
	
	def cmd_update_tree(self):
		target = os.path.expanduser('~/.taskdb.d')
		source = os.path.expanduser('~/.taskdb')

		os.makedirs(target)
		shutil.move(source, os.path.join(target, 'default'))
		os.symlink(os.path.join(target, 'default'), source)
	
	def cmd_help(self):
		print('''Usage: %s COMMAND

COMMAND is one of:
	add          (title, [parent, progress, priority, due, notes])
		Add a new task.
	add-remote   (name, host, [port, user, keyfile])
		Add a remote host for synchronisation.
	calendar     ([upto])
		View your tasks in calendar form by due date, up to a given day.
	del          (id)
		Delete a task.
	deleted
		[debug] View the list of deleted tasks.
	help
		Show this help message.
	late         ([sort, direction, number])
		Print a listing of late tasks.
	list         ([sort, direction, number])
		List number (default all) tasks, sorted by the given
		field (asc or desc).
	motd
		Print a message suitable for a .profile or similar.
	notes        (id)
		Edit the notes field for the given task using $EDITOR.
	priorities
		List the possible values for the priority field.
	pull         (remote, [name])
		Download a remote tasklist and merge it with the local list.
	push         (remote, [name])
		Merge the local tasklist with a remote list and upload it.
	regen
		Regenerate a clean task database.
	remotes
		List the names of available synchronisation destinations.
	show-remote  (remote)
		Show the details associated with a remote destination.
	set          (id, [title, parent, progress, priority, due, notes])
		Set the value of a particular field on a task.
	switch       (name)
		Switch to a (possibly new) task list called name.
	tag          (id, tag, [...])
		Give a task some tags.
	tagged       (tag)
		List all the tasks with the given tag.
	today        ([sort, direction, number])
		List tasks due for today.
	update-tree
		Move from the traditional ~/.taskdb to the new ~/.taskdb.d structure.
	untag        (id, tag)
		Remove a tag from a task. The special tag * removes all tags.
	uuid         (id)
		[debug] Show the UUID for a given task.
	uuidgen
		[debug] Force the generation of UUIDs for all tasks.
	view         (id)
		View a task in detail, including notes.
''' % sys.argv[0])


class MergeTool(object):
	'Merges one task database into another.'
	def __init__(self, dest, src):
		self.dest = TaskList(dest)
		self.dest_fn = dest
		self.src = TaskList(src)
		self.src_fn = src
	
	def merge(self):
		added, updated = self.updates()
		deleted = self.deletes()

		return added, updated, deleted
	
	def updates(self):
		# we need to go through all the entries in src and add or amend the
		# tasks in dest
		added = 0
		updated = 0

		for src_task in self.src.list():
			dest_task = self.dest.find_uuid(src_task.uuid)

			if dest_task is None:
				self.dest.add(src_task)
				added += 1
			else:
				self.dest.update_uuid(src_task)
				updated += 1

			for tag in src_task.tags:
				self.dest.tag(dest_task.uuid, tag)

		return (added, updated)
	
	def deletes(self):
		# now delete any matches we find in the deleted table
		deleted = 0

		for src_task in self.src.deleted():
			dest_task = self.dest.find_uuid(src_task)

			if dest_task is not None:
				deleted += 1
				dest_task.remove()

		return deleted
	

	@classmethod
	def connect(cls, host, port = 22, user = None, key = None):
		if user is None:
			user = getpass.getuser()

		print('Connecting to %s:%d...' % (host, port))
		transport = paramiko.Transport((host, port))
		transport.start_client()

		def auth_handler(title, inst, prompts):
			resp = []

			print('\x1B[1m%s\x1B[0m' % title)
			print(inst)

			for prompt, echo in prompts:
				if echo:
					resp.append(raw_input(prompt))
				else:
					resp.append(getpass.getpass(prompt))
		
		if key is None:
			print('Authenticating interactively...')
			transport.auth_interactive(user, auth_handler)
		else:
			print('Authenticating using stored keyfile...')
			keybuf = StringIO(key)
			pkey = paramiko.RSAKey.from_private_key(keybuf)
			transport.auth_publickey(user, pkey)

		sftp = paramiko.SFTPClient.from_transport(transport)
		return transport, sftp

	@classmethod
	def retrieve_db(cls, host, port = 22, user = None, key = None, name = None):
		transport, sftp = cls.connect(host, port, user, key)
		target = '/tmp/taskpull.%d' % random.randrange(1, 2 ** 16)

		print('Downloading remote tasklist...')
		# we should be in the user's home directory
		sftp.get('.taskdb' if name is None else '.taskdb.d/%s' % name, target)

		# deliberately not closing transport
		return transport, sftp, target


	@classmethod
	def pull(cls, host, port = 22, user = None, key = None, name = 'default'):
		# retrieve remote tasklist
		transport, sftp, target = cls.retrieve_db(host, port, user, key, name)
		transport.close()

		print('Merging...')
		source = os.path.expanduser('~/.taskdb')
		merger = cls(source, target)
		stats = merger.merge()

		print('%d additions, %d amendments, %d deletions.' % stats)
		print('Done.')
		os.unlink(target)
	
	@classmethod
	def push(cls, host, port = 22, user = None, key = None, name = 'default'):
		# get remote tasklist
		transport, sftp, target = cls.retrieve_db(host, port, user, key)
		source = os.path.expanduser('~/.taskdb')

		print('Merging...')
		merger = cls(target, source)
		stats = merger.merge()

		print('Uploading tasklist...')
		sftp.put(target, '.taskdb.d/%s' % name)
		transport.close()

		print('%d additions, %d amendments, %d deletions.' % stats)
		print('Done.')
		os.unlink(target)
	
	@classmethod
	def regen(cls):
		'Recreate the task database with the latest schema.'
		print('Creating new database...')
		source = os.path.realpath(os.path.expanduser('~/.taskdb'))
		target = '/tmp/taskgen.%d' % random.randrange(1, 2 ** 16)
		merger = cls(target, source)

		print('Merging...')
		merger.merge()

		print('Copying remotes...')
		for name in merger.src.remotes():
			host, port, user, key, last_sync = merger.src.remote(name)
			merger.dest.add_remote(name, host, port, user, key)
			merger.dest.remote_synced(name, last_sync)

		print('Replacing files...')
		shutil.copy(source, '/tmp/taskbak.%d' % time.time())
		shutil.move(target, source)

		print('Done.')



if __name__ == '__main__':
	for i, arg in enumerate(sys.argv):
		if arg[0] == ':':
			TaskList.name_override = arg[1:]
			sys.argv.remove(i)
			break

	if 'update-tree' in sys.argv:
		task_list = TaskList('/tmp/%d' % random.randrange(1, 2 ** 16))
	else:
		task_list = TaskList(TaskList.active_path())
	TasksApp(task_list).run()

	
